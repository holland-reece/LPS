#   facet_wrap(~ session_cond) +  # create a separate panel for each condition
#   theme_minimal() +  # use a minimal theme
#   labs(title = "Subject Accuracy Over Blocks Across Conditions",
#        x = "Block",
#        y = "Accuracy") +
#   theme(legend.position = "none")  # hide legend
# Calculate average measure for each block and condition
avg_data <- df %>%
group_by(session_cond, block) %>%
summarise(avg = mean(resp, na.rm=TRUE)) # add param to ignore NaNs
# Plot subject trajectories and average lines
ggplot() +
# Plot individual subject trajectories with transparency
geom_line(data = df, aes(x = block, y = resp, group = subjid,
color = subjid), alpha = 0.3) +  # make subject lines more transparent (modulate alpha)
# Plot points for subject data (may remove later)
geom_point(data = df, aes(x = block, y = resp, group = subjid,
color = subjid), alpha = 0.3) +   # make subject points more transparent
# Plot average trajectory for each condition in black
geom_line(data = avg_data, aes(x = block, y = avg), color = "black", size = .75) +  # black average line
geom_point(data = avg_data, aes(x = block, y = avg), color = "black", size = 1) +  # points on average line
# Facet by condition (in R, a 'facet' is a figure panel)
facet_wrap(~ session_cond) +
# Labels and theme
theme_minimal() +
labs(title = plot_title,
x = "Block",
y = m_string) +
theme(legend.position = "none")  # No legend for subjects
ggsave <- function(..., bg = 'white') ggplot2::ggsave(..., bg = bg)
ggsave('/home/common/piaf/LPS_STHLM/analysis_2023/LPS_behavioral_data/block_effects_results/BQ1_resp_change.png')
merged_BQ2_WQ2 <- Merge(complete_BQ2, complete_WQ2, by="rows") # merge and save
merged_BQ2_WQ2 <- Merge(complete_BQ2, complete_WQ2, by="rows") # merge and save
merged_BQ2_WQ2 <- rbind(complete_BQ2, complete_WQ2) # merge and save
df <- merged_BQ2_WQ2 # this will be overwritten if you rerun this for different questions
# measure <- resp # measure you want to plot (resp, cresp, rt, acc)
m_string <- "Response (Higher = more difficult" # string describing the measure for plot titles and labels
plot_title <- glue('Task (Intero- and Exteroception) Difficulty Over Blocks')
# # Create a plot with each subject's trajectory across blocks, faceted by condition
# ggplot(df, aes(x = block, y = rt, group = subjid, color = subjid)) +
#   geom_line() +  # plot a line for each subject
#   geom_point() +  # add points at each block for each subject
#   facet_wrap(~ session_cond) +  # create a separate panel for each condition
#   theme_minimal() +  # use a minimal theme
#   labs(title = "Subject Accuracy Over Blocks Across Conditions",
#        x = "Block",
#        y = "Accuracy") +
#   theme(legend.position = "none")  # hide legend
# Calculate average measure for each block and condition
avg_data <- df %>%
group_by(session_cond, block) %>%
summarise(avg = mean(resp, na.rm=TRUE)) # add param to ignore NaNs
# Plot subject trajectories and average lines
ggplot() +
# Plot individual subject trajectories with transparency
geom_line(data = df, aes(x = block, y = resp, group = subjid,
color = subjid), alpha = 0.3) +  # make subject lines more transparent (modulate alpha)
# Plot points for subject data (may remove later)
geom_point(data = df, aes(x = block, y = resp, group = subjid,
color = subjid), alpha = 0.3) +   # make subject points more transparent
# Plot average trajectory for each condition in black
geom_line(data = avg_data, aes(x = block, y = avg), color = "black", size = .75) +  # black average line
geom_point(data = avg_data, aes(x = block, y = avg), color = "black", size = 1) +  # points on average line
# Facet by condition (in R, a 'facet' is a figure panel)
facet_wrap(~ session_cond) +
# Labels and theme
theme_minimal() +
labs(title = plot_title,
x = "Block",
y = m_string) +
theme(legend.position = "none")  # No legend for subjects
ggsave <- function(..., bg = 'white') ggplot2::ggsave(..., bg = bg)
ggsave('/home/common/piaf/LPS_STHLM/analysis_2023/LPS_behavioral_data/block_effects_results/BQ2_WQ2_resp_change.png')
merged_BQ2_WQ2 <- rbind(complete_BQ2, complete_WQ2) # merge and save
df <- merged_BQ2_WQ2 # this will be overwritten if you rerun this for different questions
# measure <- resp # measure you want to plot (resp, cresp, rt, acc)
m_string <- "Response (Higher = more difficult" # string describing the measure for plot titles and labels
plot_title <- glue('Task (Intero- and Exteroception) Difficulty Over Blocks')
# # Create a plot with each subject's trajectory across blocks, faceted by condition
# ggplot(df, aes(x = block, y = rt, group = subjid, color = subjid)) +
#   geom_line() +  # plot a line for each subject
#   geom_point() +  # add points at each block for each subject
#   facet_wrap(~ session_cond) +  # create a separate panel for each condition
#   theme_minimal() +  # use a minimal theme
#   labs(title = "Subject Accuracy Over Blocks Across Conditions",
#        x = "Block",
#        y = "Accuracy") +
#   theme(legend.position = "none")  # hide legend
# Calculate average measure for each block and condition
# TRY PLOTTING STDD -> see if ppl's perception of difficulty changes in a pattern
avg_data <- df %>%
group_by(session_cond, block) %>%
summarise(avg = sd(resp, na.rm=TRUE)) # add param to ignore NaNs
# summarise(avg = mean(resp, na.rm=TRUE)) # add param to ignore NaNs
# Plot subject trajectories and average lines
ggplot() +
# Plot individual subject trajectories with transparency
geom_line(data = df, aes(x = block, y = resp, group = subjid,
color = subjid), alpha = 0.3) +  # make subject lines more transparent (modulate alpha)
# Plot points for subject data (may remove later)
geom_point(data = df, aes(x = block, y = resp, group = subjid,
color = subjid), alpha = 0.3) +   # make subject points more transparent
# Plot average trajectory for each condition in black
geom_line(data = avg_data, aes(x = block, y = avg), color = "black", size = .75) +  # black average line
geom_point(data = avg_data, aes(x = block, y = avg), color = "black", size = 1) +  # points on average line
# Facet by condition (in R, a 'facet' is a figure panel)
facet_wrap(~ session_cond) +
# Labels and theme
theme_minimal() +
labs(title = plot_title,
x = "Block",
y = m_string) +
theme(legend.position = "none")  # No legend for subjects
ggsave <- function(..., bg = 'white') ggplot2::ggsave(..., bg = bg)
ggsave('/home/common/piaf/LPS_STHLM/analysis_2023/LPS_behavioral_data/block_effects_results/BQ2_WQ2_resp_change_sd.png')
library(dplyr)         #needed for filtering the data
library(ggplot2)       #needed for plotting the data
library(reshape2)      #needed for changing between long/wide format
library(readxl)        #needed for importing excel files
library(ggpubr)        #needed for adding significance bars to plots
library(car)           #for recoding the values
# Mixed effects linear models
library(lme4)
library(lmerTest)
library(emmeans) # post-hoc comparisons
# Other useful R packages
library(glue) # lets me code sort of like I can with f-strings in Python (sort of)
setwd("/home/common/piaf/LPS_STHLM/analysis_2023/LPS_behavioral_data") # location of data and this script
task_ses1 <- read.csv("summary_ses-01_interoception_responses.csv") # contains condition, reaction time, and response for one session
task_all_sessions <- read.csv("summary_allsessions_interoception_responses.csv") # contains condition, reaction time, and response for all sessions
task_all_sessions_acc <- read.csv("summary_allsessions_interoception_acc.csv") # contains condition, reaction time, response, and accuracy for all sessions
session_conditions <- read_excel("cond_ses_info.xlsx") # contains condition names ("morningpl", "morninglps", etc)
## 3.1. Merging the info from two datasets: Matching session number (e.g. "ses-01") to the condition (e.g. "plmorning")
session_long <- melt(session_conditions, id.vars = c("subjectID", "anat", "pls", "group"), value.name = "session_cond", variable.name = "session_num") # change session info file to long format
# Merge task_all_sessions, task_all_sessions_acc by matching subject ID, condition, reation time, session, and response
merged_all_sessions_acc <- left_join(task_all_sessions, task_all_sessions_acc, by=join_by(subjid == subjid, cond == cond, rt == rt, session == session, resp == resp), relationship = "many-to-one", multiple = "first")
# Merge the datasets based on matching subject IDs and session numbers in both datasets. Result is a merged dataset containing the session number and session condition
merged_all_sessions <- left_join(merged_all_sessions_acc, session_long, by=join_by(subjid == subjectID, session == session_num))
## 3.2. Recoding the labels (recode responses on the 4-point scale in the opposite direction)
merged_all_sessions$resp_re <- car::recode(merged_all_sessions$resp, "1 = 4; 2 = 3; 3 = 2; 4 = 1")
merged_all_sessions$cresp_re <- car::recode(merged_all_sessions$cresp, "1 = 4; 2 = 3; 3 = 2; 4 = 1")
## 3.3. Separating interoception and exteroception
### 3.3.1. Interoception: Separating BQ1 & BQ2
merged_inter <- data.frame(dplyr::filter(merged_all_sessions, merged_all_sessions$cond == "BQ1" | merged_all_sessions$cond == "BQ2"))
merged_interBQ1 <- data.frame(dplyr::filter(merged_all_sessions, merged_all_sessions$cond == "BQ1"))
merged_interBQ2 <- data.frame(dplyr::filter(merged_all_sessions, merged_all_sessions$cond == "BQ2"))
####### Filtering for participants, who have data for all sessions
complete_BQ1 <- dplyr::filter(merged_interBQ1, merged_interBQ1$subjid != "sub-120" & merged_interBQ1$subjid != "sub-138" & merged_interBQ1$subjid != "sub-141")
complete_BQ2 <- dplyr::filter(merged_interBQ2, merged_interBQ1$subjid != "sub-120" & merged_interBQ1$subjid != "sub-138" & merged_interBQ1$subjid != "sub-141")
### 3.3.1. Exteroception: Separating WQ1 & WQ2
merged_exte <- data.frame(dplyr::filter(merged_all_sessions, merged_all_sessions$cond == "WQ1" | merged_all_sessions$cond == "WQ2"))
merged_exteWQ1 <- data.frame(dplyr::filter(merged_all_sessions, merged_all_sessions$cond == "WQ1"))
merged_exteWQ2 <- data.frame(dplyr::filter(merged_all_sessions, merged_all_sessions$cond == "WQ2"))
####### Filtering for participants, who have data for all sessions
complete_WQ1 <- dplyr::filter(merged_exteWQ1, merged_exteWQ1$subjid != "sub-120" & merged_exteWQ1$subjid != "sub-138" & merged_exteWQ1$subjid != "sub-141")
complete_WQ2 <- dplyr::filter(merged_exteWQ2, merged_exteWQ1$subjid != "sub-120" & merged_exteWQ1$subjid != "sub-138" & merged_exteWQ1$subjid != "sub-141")
library(ggplot2)
library(dplyr)
library(glue)
# Merge datasets
merged_BQ2_WQ2 <- rbind(complete_BQ2, complete_WQ2)
# Assign merged data to df
df <- merged_BQ2_WQ2
m_string <- "Response (Higher = more difficult)" # string for plot labels
# Title for the plot
plot_title <- glue('Task (Intero- and Exteroception) Difficulty Over Blocks')
# Summarize data to calculate mean and SD for each block and condition
avg_data <- df %>%
group_by(session_cond, block) %>%
summarise(avg = sd(resp, na.rm=TRUE)) # or use mean() for mean values instead of sd()
# Create a violin plot with boxplot overlay for each block
ggplot(df, aes(x = factor(block), y = resp)) +
# Plot violins
geom_violin(aes(fill = session_cond), trim = FALSE, alpha = 0.6) +  # Violin plots per block
# Overlay boxplots
geom_boxplot(width = 0.1, aes(group = block), alpha = 0.6, color = "black", outlier.shape = NA) +  # Boxplot over violins
# Facet by condition
facet_wrap(~ session_cond) +
# Labels and theme
labs(title = plot_title,
x = "Block",
y = m_string) +
theme_minimal() +
theme(legend.position = "none")  # No legend for blocks
# Save the plot
ggsave('/home/common/piaf/LPS_STHLM/analysis_2023/LPS_behavioral_data/block_effects_results/BQ2_WQ2_resp_violin_box.png', bg = 'white')
# Merge datasets
merged_BQ2_WQ2 <- rbind(complete_BQ2, complete_WQ2)
# Assign merged data to df
df <- merged_BQ2_WQ2
m_string <- "Response (Higher = more difficult)"  # String for plot labels
# Title for the plot
plot_title <- glue('Task (Intero- and Exteroception) Difficulty Over Blocks')
# Summarize data to calculate median for each block and condition
median_data <- df %>%
group_by(session_cond, block) %>%
summarise(median_resp = median(resp, na.rm=TRUE))
# Create a boxplot with median lines for each condition
ggplot(df, aes(x = factor(block), y = resp)) +
# Plot boxplots per block
geom_boxplot(aes(group = block, fill = session_cond), alpha = 0.6, outlier.shape = NA) +
# Plot median line for each condition
geom_line(data = median_data, aes(x = factor(block), y = median_resp, group = session_cond, color = session_cond), size = 1) +
geom_point(data = median_data, aes(x = factor(block), y = median_resp, color = session_cond), size = 2) +
# Facet by condition
facet_wrap(~ session_cond) +
# Labels and theme
labs(title = plot_title,
x = "Block",
y = m_string) +
theme_minimal() +
theme(legend.position = "none")  # No legend for blocks
# Save the plot
ggsave('/home/common/piaf/LPS_STHLM/analysis_2023/LPS_behavioral_data/block_effects_results/BQ2_WQ2_resp_box_median.png', bg = 'white')
# Merge datasets
merged_BQ2_WQ2 <- rbind(complete_BQ2, complete_WQ2)
# Assign merged data to df
df <- merged_BQ2_WQ2
m_string <- "Response (Higher = more difficult)"  # String for plot labels
# Title for the plot
plot_title <- glue('Task (Intero- and Exteroception) Difficulty Over Blocks')
# Summarize data to calculate median for each block and condition
mean_data <- df %>%
group_by(session_cond, block) %>%
summarise(mean_resp = mean(resp, na.rm=TRUE))
# Create a boxplot with median lines for each condition
ggplot(df, aes(x = factor(block), y = resp)) +
# Plot boxplots per block
geom_boxplot(aes(group = block, fill = session_cond), alpha = 0.6, outlier.shape = NA) +
# Plot median line for each condition
geom_line(data = mean_data, aes(x = factor(block), y = mean_resp, group = session_cond, color = 'black'), size = 1) +
geom_point(data = mean_data, aes(x = factor(block), y = mean_resp, color = session_cond), size = 2) +
# Facet by condition
facet_wrap(~ session_cond) +
# Labels and theme
labs(title = plot_title,
x = "Block",
y = m_string) +
theme_minimal() +
theme(legend.position = "none")  # No legend for blocks
# Save the plot
ggsave('/home/common/piaf/LPS_STHLM/analysis_2023/LPS_behavioral_data/block_effects_results/BQ2_WQ2_resp_box_mean.png', bg = 'white')
# Merge datasets
merged_BQ2_WQ2 <- rbind(complete_BQ2, complete_WQ2)
# Assign merged data to df
df <- merged_BQ2_WQ2
m_string <- "Response (Higher = more difficult)"  # String for plot labels
# Title for the plot
plot_title <- glue('Task (Intero- and Exteroception) Difficulty Over Blocks')
# Summarize data to calculate median for each block and condition
mean_data <- df %>%
group_by(session_cond, block) %>%
summarise(mean_resp = mean(resp, na.rm=TRUE))
# Create a boxplot with median lines for each condition
ggplot(df, aes(x = factor(block), y = resp)) +
# Plot boxplots per block
geom_boxplot(aes(group = block, fill = session_cond), alpha = 0.6, outlier.shape = NA) +
# Plot median line for each condition
geom_line(data = mean_data, aes(x = factor(block), y = mean_resp, group = session_cond, color = 'black'), size = 1) +
geom_point(data = mean_data, aes(x = factor(block), y = mean_resp, color = 'black'), size = 2) +
# Facet by condition
facet_wrap(~ session_cond) +
# Labels and theme
labs(title = plot_title,
x = "Block",
y = m_string) +
theme_minimal() +
theme(legend.position = "none")  # No legend for blocks
# Save the plot
ggsave('/home/common/piaf/LPS_STHLM/analysis_2023/LPS_behavioral_data/block_effects_results/BQ2_WQ2_resp_box_mean.png', bg = 'white')
# Merge datasets
merged_BQ2_WQ2 <- rbind(complete_BQ2, complete_WQ2)
# Assign merged data to df
df <- merged_BQ2_WQ2
m_string <- "Response (Higher = more difficult)"  # String for plot labels
# Title for the plot
plot_title <- glue('Task (Intero- and Exteroception) Difficulty Over Blocks')
# Summarize data to calculate median, SE, and 95% confidence intervals
summary_data <- df %>%
group_by(session_cond, block) %>%
summarise(
median_resp = median(resp, na.rm = TRUE),
se_resp = sd(resp, na.rm = TRUE) / sqrt(n()),  # Standard error
lower_ci = median_resp - 1.96 * se_resp,       # Lower bound of 95% CI
upper_ci = median_resp + 1.96 * se_resp        # Upper bound of 95% CI
)
# Create a bar plot with error bars for 95% confidence intervals
ggplot(summary_data, aes(x = factor(block), y = median_resp, fill = session_cond)) +
# Plot bars representing medians
geom_col(position = "dodge", alpha = 0.7) +
# Add error bars for 95% confidence intervals
geom_errorbar(aes(ymin = lower_ci, ymax = upper_ci), width = 0.2, position = position_dodge(0.9)) +
# Facet by condition
facet_wrap(~ session_cond) +
# Labels and theme
labs(title = plot_title,
x = "Block",
y = m_string) +
theme_minimal() +
theme(legend.position = "none")  # No legend for blocks
# Save the plot
ggsave('/home/common/piaf/LPS_STHLM/analysis_2023/LPS_behavioral_data/block_effects_results/BQ2_WQ2_resp_bar_median_CI.png', bg = 'white')
# Merge datasets
merged_BQ2_WQ2 <- rbind(complete_BQ2, complete_WQ2)
# Assign merged data to df
df <- merged_BQ2_WQ2
m_string <- "Response (Higher = more difficult)"  # String for plot labels
# Title for the plot
plot_title <- glue('Task (Intero- and Exteroception) Difficulty Over Blocks')
# Summarize data to calculate median, SE, and 95% confidence intervals
summary_data <- df %>%
group_by(session_cond, block) %>%
summarise(
median_resp = mean(resp, na.rm = TRUE),
se_resp = sd(resp, na.rm = TRUE) / sqrt(n()),  # Standard error
lower_ci = mean_resp - 1.96 * se_resp,       # Lower bound of 95% CI
upper_ci = mean_resp + 1.96 * se_resp        # Upper bound of 95% CI
)
# Merge datasets
merged_BQ2_WQ2 <- rbind(complete_BQ2, complete_WQ2)
# Assign merged data to df
df <- merged_BQ2_WQ2
m_string <- "Response (Higher = more difficult)"  # String for plot labels
# Title for the plot
plot_title <- glue('Task (Intero- and Exteroception) Difficulty Over Blocks')
# Summarize data to calculate median, SE, and 95% confidence intervals
summary_data <- df %>%
group_by(session_cond, block) %>%
summarise(
mean_resp = mean(resp, na.rm = TRUE),
se_resp = sd(resp, na.rm = TRUE) / sqrt(n()),  # Standard error
lower_ci = mean_resp - 1.96 * se_resp,       # Lower bound of 95% CI
upper_ci = mean_resp + 1.96 * se_resp        # Upper bound of 95% CI
)
# Create a bar plot with error bars for 95% confidence intervals
ggplot(summary_data, aes(x = factor(block), y = median_resp, fill = session_cond)) +
# Plot bars representing medians
geom_col(position = "dodge", alpha = 0.7) +
# Add error bars for 95% confidence intervals
geom_errorbar(aes(ymin = lower_ci, ymax = upper_ci), width = 0.2, position = position_dodge(0.9)) +
# Facet by condition
facet_wrap(~ session_cond) +
# Labels and theme
labs(title = plot_title,
x = "Block",
y = m_string) +
theme_minimal() +
theme(legend.position = "none")  # No legend for blocks
# Merge datasets
merged_BQ2_WQ2 <- rbind(complete_BQ2, complete_WQ2)
# Assign merged data to df
df <- merged_BQ2_WQ2
m_string <- "Response (Higher = more difficult)"  # String for plot labels
# Title for the plot
plot_title <- glue('Task (Intero- and Exteroception) Difficulty Over Blocks')
# Summarize data to calculate median, SE, and 95% confidence intervals
summary_data <- df %>%
group_by(session_cond, block) %>%
summarise(
mean_resp = mean(resp, na.rm = TRUE),
se_resp = sd(resp, na.rm = TRUE) / sqrt(n()),  # Standard error
lower_ci = mean_resp - 1.96 * se_resp,       # Lower bound of 95% CI
upper_ci = mean_resp + 1.96 * se_resp        # Upper bound of 95% CI
)
# Create a bar plot with error bars for 95% confidence intervals
ggplot(summary_data, aes(x = factor(block), y = mean_resp, fill = session_cond)) +
# Plot bars representing medians
geom_col(position = "dodge", alpha = 0.7) +
# Add error bars for 95% confidence intervals
geom_errorbar(aes(ymin = lower_ci, ymax = upper_ci), width = 0.2, position = position_dodge(0.9)) +
# Facet by condition
facet_wrap(~ session_cond) +
# Labels and theme
labs(title = plot_title,
x = "Block",
y = m_string) +
theme_minimal() +
theme(legend.position = "none")  # No legend for blocks
# Save the plot
ggsave('/home/common/piaf/LPS_STHLM/analysis_2023/LPS_behavioral_data/block_effects_results/BQ2_WQ2_resp_bar_mean_CI.png', bg = 'white')
# Median Bars
# Merge datasets
merged_BQ2_WQ2 <- rbind(complete_BQ2, complete_WQ2)
# Assign merged data to df
df <- merged_BQ2_WQ2
m_string <- "Response (Higher = more difficult)"  # String for plot labels
# Title for the plot
plot_title <- glue('Task (Intero- and Exteroception) Difficulty Over Blocks')
# Summarize data to calculate median, SE, and 95% confidence intervals
summary_data <- df %>%
group_by(session_cond, block) %>%
summarise(
median_resp = median(resp, na.rm = TRUE),
se_resp = sd(resp, na.rm = TRUE) / sqrt(n()),  # Standard error
lower_ci = median_resp - 1.96 * se_resp,       # Lower bound of 95% CI
upper_ci = median_resp + 1.96 * se_resp        # Upper bound of 95% CI
)
# Create a bar plot with error bars for 95% confidence intervals
ggplot(summary_data, aes(x = factor(block), y = median_resp, fill = session_cond)) +
# Plot bars representing medians
geom_col(position = "dodge", alpha = 0.7) +
# Add error bars for 95% confidence intervals
geom_errorbar(aes(ymin = lower_ci, ymax = upper_ci), width = 0.2, position = position_dodge(0.9)) +
# Facet by condition
facet_wrap(~ session_cond) +
# Labels and theme
labs(title = plot_title,
x = "Block",
y = m_string) +
theme_minimal() +
theme(legend.position = "none")  # No legend for blocks
# Save the plot
ggsave('/home/common/piaf/LPS_STHLM/analysis_2023/LPS_behavioral_data/block_effects_results/BQ2_WQ2_resp_bar_median_CI.png', bg = 'white')
# Mean Bars
# Merge datasets
merged_BQ2_WQ2 <- rbind(complete_BQ2, complete_WQ2)
# Assign merged data to df
df <- merged_BQ2_WQ2
m_string <- "Response (Higher = more difficult)"  # String for plot labels
# Title for the plot
plot_title <- glue('Task (Intero- and Exteroception) Difficulty Over Blocks')
# Summarize data to calculate median, SE, and 95% confidence intervals
summary_data <- df %>%
group_by(session_cond, block) %>%
summarise(
mean_resp = mean(resp, na.rm = TRUE),
se_resp = sd(resp, na.rm = TRUE) / sqrt(n()),  # Standard error
lower_ci = mean_resp - 1.96 * se_resp,       # Lower bound of 95% CI
upper_ci = mean_resp + 1.96 * se_resp        # Upper bound of 95% CI
)
# Create a bar plot with error bars for 95% confidence intervals
ggplot(summary_data, aes(x = factor(block), y = mean_resp, fill = session_cond)) +
# Plot bars representing medians
geom_col(position = "dodge", alpha = 0.7) +
# Add error bars for 95% confidence intervals
geom_errorbar(aes(ymin = lower_ci, ymax = upper_ci), width = 0.2, position = position_dodge(0.9)) +
# Facet by condition
facet_wrap(~ session_cond) +
# Labels and theme
labs(title = plot_title,
x = "Block",
y = m_string) +
theme_minimal() +
theme(legend.position = "none")  # No legend for blocks
# Save the plot
ggsave('/home/common/piaf/LPS_STHLM/analysis_2023/LPS_behavioral_data/block_effects_results/BQ2_WQ2_resp_bar_mean_CI.png', bg = 'white')
# Mean Bars
# Error Bars: mean ± 1.96 * (SE)
# Merge datasets
merged_BQ2_WQ2 <- rbind(complete_BQ2, complete_WQ2)
# Assign merged data to df
df <- merged_BQ2_WQ2
m_string <- "Response (Higher = more difficult)"  # String for plot labels
# Title for the plot
plot_title <- glue('Task (Intero- and Exteroception) Difficulty Over Blocks')
# Summarize data to calculate median, SE, and 95% confidence intervals
summary_data <- df %>%
group_by(session_cond, block) %>%
summarise(
mean_resp = mean(resp, na.rm = TRUE),
se_resp = sd(resp, na.rm = TRUE) / sqrt(n()),  # Standard error
lower_ci = mean_resp - 1.96 * se_resp,       # Lower bound of 95% CI
upper_ci = mean_resp + 1.96 * se_resp        # Upper bound of 95% CI
)
# Create a bar plot with error bars for 95% confidence intervals
ggplot(summary_data, aes(x = factor(block), y = mean_resp, fill = session_cond)) +
# Plot bars representing medians
geom_col(position = "dodge", alpha = 0.7) +
# Add error bars for 95% confidence intervals
geom_errorbar(aes(ymin = lower_ci, ymax = upper_ci), width = 0.2, position = position_dodge(0.9)) +
# Facet by condition
facet_wrap(~ session_cond) +
# Labels and theme
labs(title = plot_title,
x = "Block",
y = m_string) +
theme_minimal() +
theme(legend.position = "none")  # No legend for blocks
# Save the plot
ggsave('/home/common/piaf/LPS_STHLM/analysis_2023/LPS_behavioral_data/block_effects_results/BQ2_WQ2_resp_bar_mean_CI.png', bg = 'white')
View(complete_WQ1)
# Reaction Time Plot ----------------------------------
# Merge datasets (assuming 'complete_WQ1' is already loaded and structured similarly to 'merged_BQ2_WQ2')
df_rt <- complete_WQ1
m_string_rt <- "Reaction Time (ms)"  # String for plot labels
# Title for the reaction time plot
plot_title_rt <- glue('Reaction Times Over Blocks')
# Summarize data to calculate mean, SE, and 95% confidence intervals for reaction times
summary_rt <- df_rt %>%
group_by(session_cond, block) %>%
summarise(
mean_rt = mean(rt, na.rm = TRUE),
se_rt = sd(rt, na.rm = TRUE) / sqrt(n()),  # Standard error
lower_ci_rt = mean_rt - 1.96 * se_rt,      # Lower bound of 95% CI
upper_ci_rt = mean_rt + 1.96 * se_rt       # Upper bound of 95% CI
)
# Create a bar plot with error bars for reaction times
ggplot(summary_rt, aes(x = factor(block), y = mean_rt, fill = session_cond)) +
# Plot bars representing mean reaction times
geom_col(position = "dodge", alpha = 0.7) +
# Add error bars for 95% confidence intervals
geom_errorbar(aes(ymin = lower_ci_rt, ymax = upper_ci_rt), width = 0.2, position = position_dodge(0.9)) +
# Facet by condition
facet_wrap(~ session_cond) +
# Labels and theme
labs(title = plot_title_rt,
x = "Block",
y = m_string_rt) +
theme_minimal() +
theme(legend.position = "none")  # No legend for blocks
# Save the reaction time plot
ggsave('/path/to/save/reaction_time_plot.png', bg = 'white')
